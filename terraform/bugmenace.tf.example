# you will need to build bug menace yourself: https://github.com/3lpsy/bugmenace
# do not use this file unless you want to use bugmenace
# the default image is t2.medium, but there is an iam user created and hints on commands to run to
# turn the system off when not in use to save money 

# running this will print sensitive data to the screen 

# set the ami here after building it
variable "bugmenace_ami" {
  default = ""
}

resource "aws_instance" "bugmenace" {
  ami                    = var.bugmenace_ami
  instance_type          = "t2.medium"
  subnet_id              = aws_subnet.main.id
  vpc_security_group_ids = [aws_security_group.main.id]
  key_name               = aws_key_pair.main.key_name
  # associate_public_ip_address = true
  user_data = <<EOF
#!/bin/bash
echo "Setting hostname"
sudo hostnamectl set-hostname bugmenace 
echo '127.0.0.1 bugmeance' | sudo tee -a /etc/hosts 
echo 'bugmenace' | sudo tee /etc/hostname 
echo "Adding repo" 
printf "\n" | sudo add-apt-repository ppa:wireguard/wireguard -y 
echo "Updating" 
sudo apt-get update 
echo "Installing" 
sudo apt-get install -y wireguard-dkms wireguard-tools  ;
echo "Networking stuff" 
echo 'net.ipv4.ip_forward=1' | sudo tee -a /etc/sysctl.conf 
echo 'net.ipv6.conf.all.forwarding=1' | sudo tee -a /etc/sysctl.conf 
sudo sysctl -p 
echo "WG stuff" 
sudo apt install dnsmasq openresolv -y 
wg genkey | sudo tee /etc/wireguard/privkey | wg pubkey | sudo tee /etc/wireguard/pubkey 
wg genkey | sudo tee /etc/wireguard/peerprivkey | wg pubkey | sudo tee /etc/wireguard/peerpubkey 
echo "Generating wg0.conf" 
echo '[Interface]' | sudo tee /etc/wireguard/wg0.conf
echo 'Address = 10.200.200.1/24' | sudo tee -a /etc/wireguard/wg0.conf
echo 'ListenPort = 36283' | sudo tee -a /etc/wireguard/wg0.conf
echo "PrivateKey = $(sudo cat /etc/wireguard/privkey | tr -d '\r\n')" | sudo tee -a /etc/wireguard/wg0.conf
echo 'DNS = 208.67.222.222,208.67.220.22' | sudo tee -a /etc/wireguard/wg0.conf
echo 'PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE' | sudo tee -a /etc/wireguard/wg0.conf
echo 'PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE' | sudo tee -a /etc/wireguard/wg0.conf

echo '' | sudo tee -a /etc/wireguard/wg0.conf
echo '[Peer]' | sudo tee -a /etc/wireguard/wg0.conf
echo "PublicKey = $(sudo cat /etc/wireguard/peerpubkey | tr -d '\r\n')" | sudo tee -a /etc/wireguard/wg0.conf
echo 'AllowedIPs = 10.200.200.2/32' | sudo tee -a /etc/wireguard/wg0.conf

sudo chmod 640 /etc/wireguard/wg0.conf 
sudo chmod 640 /etc/wireguard/privkey 
sudo chmod 640 /etc/wireguard/peerprivkey 

echo "DNS stuff" 
sudo mkdir -p /etc/systemd/resolved.conf.d;
printf "[Resolve]\nDNSStubListener=no\n" | sudo tee /etc/systemd/resolved.conf.d/noresolved.conf 
sudo systemctl restart systemd-resolved 
sudo rm /etc/resolv.conf 
sudo touch /etc/resolv.conf 
echo 'name_servers="127.0.0.1"' | sudo tee /etc/resolvconf.conf 
echo 'dnsmasq_conf=/etc/dnsmasq-openresolv.conf' | sudo tee -a /etc/resolvconf.conf 
echo 'dnsmasq_resolv=/etc/dnsmasq-resolv.conf' | sudo tee -a /etc/resolvconf.conf 
echo 'conf-file=/etc/dnsmasq-openresolv.conf' | sudo tee -a /etc/dnsmasq.conf 
echo 'resolv-file=/etc/dnsmasq-resolv.conf' | sudo tee -a /etc/dnsmasq.conf 
sudo systemctl start dnsmasq 
sudo systemctl enable dnsmasq 
sudo systemctl start wg-quick@wg0 
sudo systemctl enable wg-quick@wg0 
sudo systemctl restart dnsmasq

EOF
  root_block_device {
    volume_size = 16
  }
  tags = {
    Name = "bugmenace-server"
  }
}


resource "aws_eip" "eip" {
  vpc      = true
  instance = aws_instance.bugmenace.id
}

resource "aws_route53_record" "a_menace" {
  zone_id = data.aws_route53_zone.main.zone_id
  name    = "menace.${var.dns_root}"
  type    = "A"
  ttl     = "5"
  records = [aws_eip.eip.public_ip]
}

resource "aws_iam_user" "power_manage_user" {
  name = "BugMenacePowerManager"
  path = "/"
}

resource "aws_iam_policy" "power_manage_policy" {
  name        = "BugMenacePowerManagePolicy"
  description = "Start/Stop the BugMenace"
  policy      = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
          {
              "Effect": "Allow",
              "Action": [
                  "ec2:StartInstances",
                  "ec2:StopInstances"
              ],
              "Resource": "${aws_instance.bugmenace.arn}",
              "Condition": {
                "ForAnyValue:IpAddress": {
                  "aws:SourceIp": ${jsonencode(var.trusted_external_cidr_block)}
                }
              }
          },
          {
              "Effect": "Allow",
              "Action": "ec2:DescribeInstances",
              "Resource": "*"
          }
      ]
  }
EOF

}


resource "aws_iam_policy_attachment" "power_manage_policy_attach" {
  name       = "BugMenacePowerManagePolicyAttach"
  users      = [aws_iam_user.power_manage_user.name]
  policy_arn = aws_iam_policy.power_manage_policy.arn
}

resource "aws_iam_access_key" "power_manage_key" {
  user = aws_iam_user.power_manage_user.name
}

output "bugmenace_pm_access_id" {
  value = "${aws_iam_access_key.power_manage_key.id}"
}

output "bugmenace_pm_access_secret" {
  value = "${aws_iam_access_key.power_manage_key.secret}"
}


output "bugmenace_command_start" {
  value = "aws --region ${var.aws_default_region} --profile bugmenace-pm ec2 start-instances --instance-ids ${aws_instance.bugmenace.id}"
}

output "bugmenace_command_stop" {
  value = "aws --region ${var.aws_default_region} --profile bugmenace-pm ec2 stop-instances --instance-ids ${aws_instance.bugmenace.id}"
}

output "bugmenace_command_state" {
  value = "aws --region ${var.aws_default_region} --profile bugmenace-pm ec2 describe-instances --instance-ids ${aws_instance.bugmenace.id} --query 'Reservations[*].Instances[*].State'"
}

output "bugmenace_domain" {
  value = "menace.${var.dns_root}"
}

output "bugmenace_ssh_command" {
  value = "ssh -i data/key.pem ubuntu@${aws_instance.bugmenace.public_ip}"
}

output "bugmenace_notes" {
  value = "The bug menace server uses a t2.large. Best not to keep this running for too long. You can use the IAM user created to spin the bug menace instance up and down from the CLI when not in use to save money. Add the iam creds to your .aws/credentials file with the profile name bugmenace-pm. You should probably make bash functions to make this easiest."
}

